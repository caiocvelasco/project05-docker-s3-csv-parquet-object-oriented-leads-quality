# Create a custom network for bridging the containers
networks:
  etl_network:
    driver: bridge

# Create the services, i.e., the containers with their specific services inside (postgres, python, jupyter)
services:  
  postgres:
    image: postgres:16 # The postgres service is using the "postgres:16" (check in cmd: docker ps)
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "5432:5432" 
    expose:
      - "5432" # This makes the PostgreSQL service accessible via localhost:5432 on your local machine. However, within the container environment, services will use the postgres hostname as specified. For example, for PowerBI, Since Docker exposes port 5432 of the PostgreSQL container to port 5432 on your host machine, you connect to localhost:5432 when using PowerBI Desktop on your local machine. 
    volumes:
      - pgdata:/var/lib/postgresql/data # This volume specifies the postgres storage path
      # - ~/.ssh:/root/.ssh  # Mount SSH directory into the container
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # From the local init.sql, automatically create schemas/tables in the database mounting as a volume inside the docker entrypoint folder
    networks:
      - etl_network

  python:
    restart: unless-stopped
    build: # This 'build' tells docker-compose: don't just use the image, but build it from the Dockerfile
      context: .
      dockerfile: Dockerfile
    image: python # The python service is using a custom image named "python" (check in cmd: docker ps)
    container_name: python
    env_file:
      - ./.env
    volumes:
      - .:/workspace
      # - ~/.ssh:/root/.ssh  # Mount SSH directory into the container
      - /var/run/docker.sock:/var/run/docker.sock  # Bind Docker socket to enable Docker commands within the container
    working_dir: /workspace 
    depends_on:
     - postgres # Name of the service/image that is build before, generating dependency
    stdin_open: true # Allow an interactive terminal session
    tty: true # Allow an interactive terminal session
    # command: sleep infinity # used to keep the container running indefinitely
    command: bash # automatically open a bash terminal when the container starts
    networks:
      - etl_network

  jupyter_notebook:
      image: jupyter/minimal-notebook
      container_name: jupyter_notebook
      restart: unless-stopped
      environment:
        - JUPYTER_TOKEN=123
      #  - JUPYTER_ENABLE_LAB: "yes"
      ports:
        - "8888:8888"
      volumes:
        - .:/workspace
      #  - ~/.ssh:/root/.ssh  # Mount SSH directory into the container
      working_dir: /workspace # Explicitly set the working directory for the Jupyter Notebook service to /workspace. Thus, os.getcwd() should return /workspace when executed within the Jupyter Notebook environment.
      depends_on:
        - python
        - postgres
      networks:
        - etl_network

  # pgadmin:
  #     image: dpage/pgadmin4
  #     restart: unless-stopped
  #     environment:
  #       PGADMIN_DEFAULT_EMAIL: "admin@example.com"  # Change this to your desired email address
  #       PGADMIN_DEFAULT_PASSWORD: "admin"   # Change this to your desired password
  #     ports:
  #       - "8080:80"  # Expose port 8080 on the host machine to access pgAdmin
  #     depends_on:
  #       - postgres

volumes:
  pgdata: